Your task is to regenerate the Python script named `docs.py`.
This script, when executed, will create an educational website
consisting of multiple Markdown files (`code.md`, `se.md`,
`ai.md`, `maths.md`, `tutorial.md`, `license.md`) and one text
file (`prompt.txt`). The content for these files must be derived
from the analysis of the `bingo.py` script, which will be
available in the same folder as `docs.py` when the script is run.

**Overall LLM Instructions for this task:**
1.  **Primary Output:** Your *only* output should be the complete
    Python code for `docs.py`.
2.  **No Intermediaries:** Do NOT show any intermediate outputs,
    conversational fluff, progress messages, or explanations. Just
    spit out the final Python file contents directly as a single
    code block.
3.  **Input `bingo.py`:** The `docs.py` script should assume
    `bingo.py` is accessible in the current working directory. All
    generated Markdown content must be based on this specific
    `bingo.py` script.

**Workflow for using this prompt:**
1.  Log into Gemini.
2.  Import your code, selecting the root folder of your repository
    (containing `bingo.py` and where `docs.py` will be).
3.  Tell Gemini to find `/docs/prompt.txt` and follow its
    instructions to generate the website from `/bingo.py`.

**`docs.py` Script Specifications:**

1.  **File Generation:** The Python script must generate the
    following files **within a `docs/` subdirectory**:
    * `code.md`: Documents the structure of `bingo.py`.
    * `se.md`: Explains Software Engineering concepts from `bingo.py`.
    * `ai.md`: Explains Artificial Intelligence concepts from `bingo.py`.
    * `maths.md`: Explains Mathematical and Statistical concepts
      from `bingo.py`.
    * `tutorial.md`: Provides tutorials for `eg__` functions in
      `bingo.py`.
    * `license.md`: Contains the MIT License text.
    * `prompt.txt`: Contains this very master prompt text (i.e.,
      the instructions you are currently following).

2.  **Target Audience & Tone:**
    * Audience: Graduate students with no specific prior background
      in the AI/SE topics covered.
    * Tone: Friendly, informative, concise, and very NOT verbose.

3.  **Navigation Bar:**
    * Add the following Markdown navigation bar at the top of
      `code.md`, `se.md`, `ai.md`, `maths.md`, `tutorial.md`, and
      `license.md`:
        `[home](../README.md) | [maths](maths.md) | [se](se.md) |
        [ai](ai.md) | [code](code.md) | [tut](tutorial.md) |
        [make](prompt.txt) | [license](license.md)`
        `---`
    * The `[make](prompt.txt)` link should allow the user to view
      and copy the prompt string.

4.  **Content for `code.md` ("Code Overview"):**
    * Reflect over all classes in `bingo.py`.
    * For each class:
        * Include a compact Markdown table of its attributes (public
          & private, default values if present, short paraphrased
          descriptions - 10-15 words max).
        * Group methods into conceptual protocols (e.g.,
          `core_behavior`, `initialization`, `data_management`,
          `statistics_query`, `distance_calculation`,
          `clustering_projection`). Infer sensible, reusable names.
        * List each method under its protocol with a *newly
          generated, concise one-line summary* of its functionality
          (15-20 words max).
    * **Code Snippets:** All code snippets in `code.md` should be
      syntax highlighted using Markdown's ```python` block.

5.  **Content for `se.md` ("Software Engineering Concepts"),
    `ai.md` ("Artificial Intelligence Concepts"), and `maths.md`
    ("Mathematical and Statistical Concepts"):**
    * These pages should provide detailed (yet concise) explanations
      of core SE, AI, and Mathematical concepts, respectively, as
      identified from `bingo.py`.
    * **"Terms to watch for":** At the start of each page, under a
      heading like `## Terms to watch for`, provide an alphabetized
      list of 5-10 key technical terms that are introduced and
      explained within the main content of *that specific page*.
      The list should only contain the terms themselves, not their
      definitions. (LLM: You will need to identify these terms as
      you generate the main content for the page and ensure they
      are listed).
    * **Content Body:** Elaborate on each concept, include
      illustrative Python code snippets from `bingo.py` using
      Markdown syntax highlighting (```python ... ```), and
      reference protocol names from `code.md` where relevant.
    * **Specific Concepts to Cover:**
        * **`se.md` (Coding):** Python fundamentals, OOP, CLI,
            file handling, String Manipulation Methods, Data Type
            Coercion, File Input/Output, Error Handling, Tuple Data
            Structure, Helper Functions, Floating Point Number
            Representation and Issues, Introspection, Generators,
            Recursion, Polymorphism, Docstring Parsing for
            Configuration, Web Data Retrieval, Caching Mechanisms.
        * **`ai.md` (AI):** Multi-objective optimization, XAI,
            active learning, Custom Data Structures for
            Aggregation/Summarization, Defining Optimization
            Objectives, Extrapolation Techniques, Clustering,
            Decision Tree Learning, Random Projections, Locality
            Sensitive Hashing (LSH), Active Learning, Stochastic
            Landscape Analysis.
        * **`maths.md` (Maths):** Statistics, normalization,
            distance metrics, Logarithms and Exponentiation,
            Descriptive Statistics: Mean, Descriptive Statistics:
            Standard Deviation, Data Normalization/Scaling,
            Probability Density Function (PDF), Entropy, Bayesian
            Concepts: Prior Probability, Bayesian Concepts:
            Likelihood, Distance Metrics: Minkowski Distance.
    * **References:**
        * Include 2-4 key references per page to support
          explanations.
        * Where relevant and possible, include papers by "Tim
          Menzies". Tim Menzies' papers should not exceed 1/3 of
          the total references for that page. (LLM: Use general
          well-known texts or placeholder citations if specific
          live search for Menzies papers is not feasible, but
          ensure this instruction is part of the prompt content
          that `docs.py` produces for `prompt.txt`).
        * Format references as Markdown footnotes (e.g., `[^1]` and
          `[^1]: Author, A. B. (Year). *Title of work*. Source.).
    * **Review Questions:** At the end of each page, include 2-3
      review questions suitable for exams.

6.  **Content for `tutorial.md` ("Tutorials"):**
    * Iterate through each `eg__` function found in `bingo.py`.
    * For each `eg__` function:
        * **Section Header:** Use the function name (e.g.,
          `## Tutorial: \`eg__the\``).
        * **Purpose & Concepts:** Clearly explain its purpose and the
          specific SE/AI/Maths concepts it demonstrates, linking to
          ideas in `se.md`, `ai.md`, and `maths.md`.
        * **Code with New Educational Comments:** Display the Python
          code for the `eg__` function. The LLM must **add new,
          detailed educational comments** directly within this code
          block to clarify each step or important logic, targeting
          the specified graduate student audience. Ensure correct
          f-string escaping within the generated code (e.g.,
          `print(f"  {{col_obj}}")` to produce `print(f"  {col_obj}")`
          in the tutorial markdown).
        * **Execution and Output Interpretation:** Explain how to run
          the example and how to interpret its output. **If the
          `eg__` function produces console output, include that
          output as part of the description and explanation.**
        * **Links to `code.md`:** Mention relevant class protocols
          from `code.md` used by the example.
        * **Exercises:** Provide one short exercise (1-5 minutes)
          and one longer homework exercise (1-2 hours suggested
          effort).
    * Fully flesh out the tutorials for `eg__the`, `eg__csv`,
      `eg__data`, `eg__ydist`, `eg__poles`, `eg__counts`. For any
      other `eg__` functions from `bingo.py` (like `eg__all`,
      `eg__about`), provide a structural placeholder or a more
      summarized tutorial, clearly indicating that these would be
      filled similarly by the LLM.

7.  **Content for `license.md`:**
    * Include the standard MIT License text.
    * The copyright line should be: `Copyright (c) 2025 Tim Menzies
      <timm@ieee.org>` (year based on `bingo.py`).

8.  **Content for `prompt.txt`:**
    * The `docs.py` script should regenerate this entire
      master prompt (the one you are currently reading, which
      includes the instruction to "regenerate the python" and "NOT
      show intermediaries") into the file `prompt.txt`.

**Final Python Script (`docs.py`) Structure:**
* Use helper functions within the Python script to generate content
  for each file.
* A `main()` function should orchestrate the calls to these helper
  functions and write the files.
* Ensure the generated Python script is well-formatted and free of
  syntax errors.
* The script should print success messages to the console as it
  generates each file (e.g., "Successfully generated code.md").

